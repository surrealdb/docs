# SurrealDB

> SurrealDB is a scalable, distributed, document-oriented database with real-time querying capabilities and support for graph-based relationships.

Things to remember when working with SurrealDB:

- SurrealDB combines traditional database features with real-time capabilities and graph relationships
- It supports multiple query languages including SurrealQL (native) and HTTP API
- Can be embedded directly in applications or run as a standalone service
- Supports both traditional table-based and graph-based data modeling
- Provides real-time data synchronization and live queries

## Get Started

- [SurrealDB Installation Guide](https://surrealdb.com/docs/installation): Detailed instructions for installing SurrealDB
- [SurrealDB Quick Start](https://surrealdb.com/docs/quickstart): A step-by-step guide to get you started with SurrealDB
- [Get started with Surreal Cloud](https://surrealdb.com/docs/cloud/getting-started): A guide to get you started with Surreal Cloud
- [Get started by installing SurrealDB](https://surrealdb.com/docs/surrealdb/introduction/start#getting-started-by-installing-surrealdb): A guide to get you started in-memory, Single-node On-Disk, Single Node On-disk, and Multi-node scalable deployments of SurrealDB
- [Get started with JavaScript SDK](https://surrealdb.com/docs/sdk/javascript/start): A guide to get you started with the JavaScript SDK
- [Get started with Rust SDK](https://surrealdb.com/docs/sdk/rust/setup): A guide to get you started with the Rust SDK
- [Get started with Java SDK](https://surrealdb.com/docs/sdk/java/start): A guide to get you started with the Java SDK
- [Get started with Golang SDK](https://surrealdb.com/docs/sdk/golang/start): A guide to get you started with the Golang SDK
- [Get started with .NET SDK](https://surrealdb.com/docs/sdk/dotnet/start): A guide to get you started with the .NET SDK



## Key Features

- Multi-model database (document, graph, relational)
- Real-time queries and data changes
- Built-in authentication and row-level security
- ACID compliant transactions
- Supports complex data relationships
- Embedded or distributed deployment options

## API Access

- HTTP API for RESTful operations
- WebSocket connections for real-time updates
- Native client libraries for multiple languages
- GraphQL-like query capabilities

## Docs

- [SurrealDB Documentation](https://surrealdb.com/docs/surrealdb): Comprehensive documentation for SurrealDB
- [SurrealQL Documentation](https://surrealdb.com/docs/surrealql): Documentation for SurrealDB's query language
- [Surrealist Documentation](https://surrealist.com/docs/introduction): Documentation for Surrealist, database management interface
- [Surreal Cloud Documentation](https://surrealdb.com/docs/cloud): Documentation for Surreal Cloud, the cloud-based version of SurrealDB
- [JavaScript SDK Documentation](https://surrealdb.com/docs/javascript/introduction): Documentation for the JavaScript SDK
- [Python SDK Documentation](https://surrealdb.com/docs/python/introduction): Documentation for the Python SDK
- [Go SDK Documentation](https://surrealdb.com/docs/golang/introduction): Documentation for the Go SDK
- [Rust SDK Documentation](https://surrealdb.com/docs/rust/introduction): Documentation for the Rust SDK
- [SurrealDB CLI](https://surrealdb.com/docs/cli): Command line interface documentation
- [HTTP Integration](https://surrealdb.com/docs/integration/http): Guide for using SurrealDB's HTTP API
- [Access Control](https://surrealdb.com/docs/surrealql/statements/access): Security and permissions management

## Examples

- Database Operations:
  - Creating and managing databases
  - Defining tables and schemas
  - Setting up relationships
  - Querying and modifying data
- Authentication:
  - User management
  - Role-based access control
  - Token-based authentication
- Real-time Features:
  - Live queries
  - Change feeds
  - WebSocket subscriptions

## Best Practices

- Use appropriate authentication mechanisms for your use case
- Implement proper access control policies
- Design schemas with relationships in mind
- Optimize queries for performance
- Consider data modeling patterns that leverage SurrealDB's graph capabilities
- Use transactions when maintaining data consistency is critical

## Integration Options

- Direct database integration
- REST API usage
- WebSocket connections
- Language-specific SDKs
- Framework integrations (where available)